{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PDF parser \u00b6 Version 0.4.0 Author \u00b6 DarkDemiurg Features \u00b6 Extract text, html, xml or csv from PDF file Requirements \u00b6 Java \u00b6 Java 8+ Python \u00b6 3.8 3.9 Usage \u00b6 Usage: pdfparser [ OPTIONS ] FILENAME PDF parser Options: --output-type [ TXT | HTML | XML | CSV ] [ default: TXT ] --text_extractor [ pdfminer.six | PyPDF2 ] [ default: pdfminer.six ] --html_extractor [ pdfminer.six | pdftables ] [ default: pdfminer.six ] --csv_extractor [ tabula | pdftables ] [ default: tabula ] --pdftables_key TEXT pdftables.com API key --output PATH Output file name --help Show this message and exit. Extractors \u00b6 pdfminer.six \u00b6 PyPDF2 \u00b6 tabula-py \u00b6 pdftables.com via python API \u00b6 Extractors feature table \u00b6 Extractors/Type TXT HTML XML CSV pdfminer.six PyPDF2 tabula-py pdftables.com Credits \u00b6 This package was created with Cookiecutter and the DarkDemiurg/cookiecutter-pypackage project template.","title":"Home"},{"location":"#pdf-parser","text":"Version 0.4.0","title":"PDF parser"},{"location":"#author","text":"DarkDemiurg","title":"Author"},{"location":"#features","text":"Extract text, html, xml or csv from PDF file","title":"Features"},{"location":"#requirements","text":"","title":"Requirements"},{"location":"#java","text":"Java 8+","title":"Java"},{"location":"#python","text":"3.8 3.9","title":"Python"},{"location":"#usage","text":"Usage: pdfparser [ OPTIONS ] FILENAME PDF parser Options: --output-type [ TXT | HTML | XML | CSV ] [ default: TXT ] --text_extractor [ pdfminer.six | PyPDF2 ] [ default: pdfminer.six ] --html_extractor [ pdfminer.six | pdftables ] [ default: pdfminer.six ] --csv_extractor [ tabula | pdftables ] [ default: tabula ] --pdftables_key TEXT pdftables.com API key --output PATH Output file name --help Show this message and exit.","title":"Usage"},{"location":"#extractors","text":"","title":"Extractors"},{"location":"#pdfminersix","text":"","title":"pdfminer.six"},{"location":"#pypdf2","text":"","title":"PyPDF2"},{"location":"#tabula-py","text":"","title":"tabula-py"},{"location":"#pdftablescom-via-python-api","text":"","title":"pdftables.com via python API"},{"location":"#extractors-feature-table","text":"Extractors/Type TXT HTML XML CSV pdfminer.six PyPDF2 tabula-py pdftables.com","title":"Extractors feature table"},{"location":"#credits","text":"This package was created with Cookiecutter and the DarkDemiurg/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"Top-level package for PDF parser.","title":"Modules"},{"location":"changelog/","text":"Changelog \u00b6 [0.4.0] - 2022-07-22 \u00b6 Added \u00b6 CSV & HTML extract via pdftables.com [0.3.0] - 2022-07-22 \u00b6 Added \u00b6 CSV export [0.2.6] - 2022-07-22 \u00b6 Added \u00b6 Test file output [0.2.5] - 2022-07-22 \u00b6 Changed \u00b6 Fix coverage [0.2.4] - 2022-07-22 \u00b6 Changed \u00b6 Migration to GitHub Refactoring [0.2.3] - 2022-07-22 \u00b6 Changed \u00b6 Refactoring [0.2.2] - 2022-07-21 \u00b6 Added \u00b6 New tests [0.2.1] - 2022-07-20 \u00b6 Added \u00b6 CLI support Changed \u00b6 Refactoring [0.2.0] - 2022-07-19 \u00b6 Added \u00b6 XML & HTML extract [0.1.2] - 2022-07-18 \u00b6 Changed \u00b6 Refactoring tests [0.1.1] - 2022-07-15 \u00b6 Changed \u00b6 Refactoring [0.1.0] - 2022-07-14 \u00b6 Added \u00b6 Initial commit","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#040---2022-07-22","text":"","title":"[0.4.0] - 2022-07-22"},{"location":"changelog/#added","text":"CSV & HTML extract via pdftables.com","title":"Added"},{"location":"changelog/#030---2022-07-22","text":"","title":"[0.3.0] - 2022-07-22"},{"location":"changelog/#added_1","text":"CSV export","title":"Added"},{"location":"changelog/#026---2022-07-22","text":"","title":"[0.2.6] - 2022-07-22"},{"location":"changelog/#added_2","text":"Test file output","title":"Added"},{"location":"changelog/#025---2022-07-22","text":"","title":"[0.2.5] - 2022-07-22"},{"location":"changelog/#changed","text":"Fix coverage","title":"Changed"},{"location":"changelog/#024---2022-07-22","text":"","title":"[0.2.4] - 2022-07-22"},{"location":"changelog/#changed_1","text":"Migration to GitHub Refactoring","title":"Changed"},{"location":"changelog/#023---2022-07-22","text":"","title":"[0.2.3] - 2022-07-22"},{"location":"changelog/#changed_2","text":"Refactoring","title":"Changed"},{"location":"changelog/#022---2022-07-21","text":"","title":"[0.2.2] - 2022-07-21"},{"location":"changelog/#added_3","text":"New tests","title":"Added"},{"location":"changelog/#021---2022-07-20","text":"","title":"[0.2.1] - 2022-07-20"},{"location":"changelog/#added_4","text":"CLI support","title":"Added"},{"location":"changelog/#changed_3","text":"Refactoring","title":"Changed"},{"location":"changelog/#020---2022-07-19","text":"","title":"[0.2.0] - 2022-07-19"},{"location":"changelog/#added_5","text":"XML & HTML extract","title":"Added"},{"location":"changelog/#012---2022-07-18","text":"","title":"[0.1.2] - 2022-07-18"},{"location":"changelog/#changed_4","text":"Refactoring tests","title":"Changed"},{"location":"changelog/#011---2022-07-15","text":"","title":"[0.1.1] - 2022-07-15"},{"location":"changelog/#changed_5","text":"Refactoring","title":"Changed"},{"location":"changelog/#010---2022-07-14","text":"","title":"[0.1.0] - 2022-07-14"},{"location":"changelog/#added_6","text":"Initial commit","title":"Added"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/DarkDemiurg/pdfparser/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 PDF parser could always use more documentation, whether as part of the official PDF parser docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/DarkDemiurg/pdfparser/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up pdfparser for local development. Fork the pdfparser repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/pdfparser.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/DarkDemiurg/pdfparser/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_pdfparser.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/DarkDemiurg/pdfparser/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"PDF parser could always use more documentation, whether as part of the official PDF parser docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/DarkDemiurg/pdfparser/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up pdfparser for local development. Fork the pdfparser repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/pdfparser.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/DarkDemiurg/pdfparser/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_pdfparser.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install PDF parser, run this command in your terminal: $ pip install pdfparser This is the preferred method to install PDF parser, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for PDF parser can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/DarkDemiurg/pdfparser Or download the tarball : $ curl -OJL https://github.com/DarkDemiurg/pdfparser/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install PDF parser, run this command in your terminal: $ pip install pdfparser This is the preferred method to install PDF parser, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for PDF parser can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/DarkDemiurg/pdfparser Or download the tarball : $ curl -OJL https://github.com/DarkDemiurg/pdfparser/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use PDF parser in a project import pdfparser","title":"Usage"},{"location":"usage/#usage","text":"To use PDF parser in a project import pdfparser","title":"Usage"}]}